{"version":3,"file":"static/js/971.a018e641.chunk.js","mappings":"qPA4FA,UAhFe,WAEb,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,EAAQ,IAAIC,KAClB,GAAgCC,EAAAA,EAAAA,UAAS,IAAID,KAAKD,EAAMG,cAAeH,EAAMI,WAAY,IAAG,eAArFC,EAAQ,KAAEC,EAAW,KAC5B,GAA4BJ,EAAAA,EAAAA,UAASF,GAAM,eAApCO,EAAM,KAAEC,EAAS,KAClBC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IAwBzB,OAJAC,EAAAA,EAAAA,YAAU,WACRd,GAASe,EAAAA,EAAAA,IAAoBR,EAAUE,GACzC,GAAG,CAACF,EAAUE,KAGZ,SAAC,IAAM,CAACO,QAAS,sBAAsB,UACnC,iBAAKC,UAAU,gBAAe,WAC1B,iBAAKA,UAAU,8BAA6B,WAC1C,iBAAKA,UAAU,mEAAkE,WAC/E,SAAC,IAAe,CAACC,KAAMC,EAAAA,OACvB,cAAGF,UAAU,iBAAgB,SAAC,eAEhC,iBAAKA,UAAU,qFAAoF,WACjG,iBAAKA,UAAU,OAAM,WACnB,gBAAKA,UAAU,qBAAoB,SAAC,gBACpC,SAAC,IAAU,CAACA,UAAU,0DAA0DG,SAAUb,EAAUc,SAAU,SAACC,GAAI,OAjC3GC,EAiC+HD,OAhCxIb,EAAOe,UAAYD,EAAEC,WACtB,EACVhB,EAAYe,GAEZvB,GAASyB,EAAAA,EAAAA,IAAa,CAAEC,QAAS,+CAAgDC,OAAQ,YALtE,IAACJ,CAiCoI,QAE9I,iBAAKN,UAAU,OAAM,WACnB,gBAAKA,UAAU,qBAAoB,SAAC,cACpC,SAAC,IAAU,CAACA,UAAU,0DAA0DG,SAAUX,EAAQY,SAAU,SAACC,GA5BxG,IAACC,KA4B6HD,GA3BlIE,UAAYjB,EAASiB,WACxB,EACVd,EAAUa,GAEVvB,GAASyB,EAAAA,EAAAA,IAAa,CAAEC,QAAS,gDAAiDC,OAAQ,UAuB0D,WAG5I,iBAAKV,UAAU,qDAAoD,WACjE,iBAAKA,UAAU,6CAA4C,WACzD,cAAGA,UAAU,eAAc,SAAC,oBAC5B,cAAGA,UAAU,sBAAqB,SAAC,WACnC,cAAGA,UAAU,sBAAqB,SAAC,YACnC,cAAGA,UAAU,sBAAqB,SAAC,aAEpCN,EAAKiB,OAAS,GAAG,yBAEdjB,EAAKkB,KAAI,SAACC,EAAMC,GACd,OACE,iBAAiBd,UAAU,6CAA4C,WACrE,cAAGA,UAAU,eAAc,SAAEe,EAAAA,GAAcF,EAAKG,SAChD,cAAGhB,UAAU,sBAAqB,SAAEa,EAAKI,SACzC,cAAGjB,UAAU,sBAAqB,SAAEa,EAAKK,WACzC,cAAGlB,UAAU,sBAAqB,SAAEa,EAAKM,UAJjCL,EAOd,OAGJ,gBAAKd,UAAU,cAAa,SAAC,sBAKjC,SAAC,IAAO,QAIpB,C","sources":["pages/dashboard/merchant_group/report.jsx"],"sourcesContent":["import Layout from '../../../components/Layout';\r\nimport Sidebar from '../sidebar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\nimport { useEffect, useState } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { openSnackBar } from '../../../redux/snackBarReducer';\r\nimport { getStatisticsOrders, selectStatisticsOrders } from '../../../redux/orderReducer';\r\nimport { SUPPORT_COINS } from \"../../../config/constants\";\r\n\r\nconst Report = () => {  \r\n\r\n  const dispatch = useDispatch();\r\n  const today = new Date();\r\n  const [fromDate, setFromDate] = useState(new Date(today.getFullYear(), today.getMonth(), 1));\r\n  const [toDate, setToDate] = useState(today);\r\n  const data = useSelector(selectStatisticsOrders);\r\n\r\n  const handleFromDate = (d) => {\r\n    const diff = toDate.getTime() - d.getTime();\r\n    if (diff >= 0) {\r\n      setFromDate(d)\r\n    } else {\r\n      dispatch(openSnackBar({ message: \"The Date From cannot be forward than Date To\", status: 'error' }));\r\n    }\r\n  }\r\n\r\n  const handleToDate = (d) => {\r\n    const diff = d.getTime() - fromDate.getTime();\r\n    if (diff >= 0) {\r\n      setToDate(d)\r\n    } else {\r\n      dispatch(openSnackBar({ message: \"The Date To cannot be backward than Date From\", status: 'error' }));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getStatisticsOrders(fromDate, toDate));\r\n  }, [fromDate, toDate])\r\n\r\n  return (\r\n    <Layout classes={'bg-[#404040] h-full'}>\r\n        <div className='flex flex-row'>\r\n            <div className=\"w-full h-[calc(100vh-80px)]\">\r\n              <div className='text-gray-100 text-2xl flex flex-row items-center px-[2rem] mt-6'>\r\n                <FontAwesomeIcon icon={faHome}/>\r\n                <p className='ml-2 font-bold'>Report</p>\r\n              </div>\r\n              <div className='w-[50%] flex justify-between px-[2rem] mt-[1rem] text-gray-100 text-xl mb-2 italic'>\r\n                <div className='flex'>\r\n                  <div className='w-full select-none'>Date From:</div>\r\n                  <DatePicker className='w-[7rem] ml-[0.5rem] cursor-pointer bg-[#404040] italic' selected={fromDate} onChange={(date) => handleFromDate(date)} />\r\n                </div>\r\n                <div className='flex'>\r\n                  <div className='w-full select-none'>Date To:</div>\r\n                  <DatePicker className='w-[7rem] ml-[0.5rem] cursor-pointer bg-[#404040] italic' selected={toDate} onChange={(date) => handleToDate(date)} />\r\n                </div>                \r\n              </div>\r\n              <div className='bg-[#333333] text-md divide-y divide-gray-400 py-1'>\r\n                <div className='w-full flex text-gray-100 leading-[1.8rem]'>\r\n                  <p className='w-[55%] pl-6'>Cryptocurrency</p>\r\n                  <p className='w-[15%] text-center'>Sales</p>\r\n                  <p className='w-[15%] text-center'>Refund</p>\r\n                  <p className='w-[15%] text-center'>Total</p>\r\n                </div>\r\n                {data.length > 0 ?<div>\r\n                  {\r\n                    data.map((item, index) => {\r\n                      return (\r\n                        <div key={index} className='w-full flex text-gray-100 leading-[1.8rem]'>\r\n                          <p className='w-[55%] pl-6'>{SUPPORT_COINS[item.name]}</p>\r\n                          <p className='w-[15%] text-center'>{item.sales}</p>\r\n                          <p className='w-[15%] text-center'>{item.refunds}</p>\r\n                          <p className='w-[15%] text-center'>{item.total}</p>\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </div>:\r\n                <div className='text-center'>\r\n                  Empty Data\r\n                </div>}\r\n              </div>\r\n            </div>\r\n            <Sidebar />\r\n        </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Report;"],"names":["dispatch","useDispatch","today","Date","useState","getFullYear","getMonth","fromDate","setFromDate","toDate","setToDate","data","useSelector","selectStatisticsOrders","useEffect","getStatisticsOrders","classes","className","icon","faHome","selected","onChange","date","d","getTime","openSnackBar","message","status","length","map","item","index","SUPPORT_COINS","name","sales","refunds","total"],"sourceRoot":""}